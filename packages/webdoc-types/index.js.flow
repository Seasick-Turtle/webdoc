declare module "@webdoc/types" {
    declare type BaseDoc = {
      name: string,
      path: string,
      stack: string[],
      parent: Doc,
      children: Doc[],
      tags: Tag[],
      brief: string,
      description: string,
      visiblity: "public" | "protected" | "private",
      version: "alpha" | "beta" | "internal" | "public" | "deprecated",
      type: "ClassDoc" | "FunctionDoc" | "MethodDoc" | "ObjectDoc" | "RootDoc" | "TypedefDoc"
    };

    declare type Doc = BaseDoc | ClassDoc | ObjectDoc | FunctionDoc | MethodDoc | PropertyDoc
        | TypedefDoc | NSDoc;

    declare type RootDoc = {
      ...Doc,
      type: "RootDoc"
    };

    declare type ClassDoc = {
      ...Doc,
      type: "ClassDoc"
    };

    declare type FunctionDoc = {
      ...Doc,
      type: "FunctionDoc"
    };

    declare type MethodDoc = {
      ...Doc,
      type: "MethodDoc"
    };

    declare type NSDoc = {
      ...Doc,
      type: "NSDoc"
    };

    declare type ObjectDoc = {
      ...Doc,
      type: "ObjectDoc"
    };

    declare type PropertyDoc = {
      ...Doc,
      type: "PropertyDoc"
    };

    declare type TypedefDoc = {
      ...Doc,
      of: [string],
      alias: string,
      type: "TypedefDoc",
    };

    declare type BaseTag = {
      name: string,
      value: string,
      type: "link" | "param" | "return" | "throws"
    };

    declare type Tag = BaseTag | DeprecatedTag | TypedTag | ParamTag | ReturnTag | ThrowsTag
        | PrivateTag | ProtectedTag | PublicTag | VisibilityTag

    declare type DeprecatedTag = {
      ...BaseTag,
      type: "DeprecatedTag"
    };

    declare type TypedTag = {
      ...BaseTag,
      dataType: string[],
      description: string,
      type: "TypedTag",
    };

    declare type MemberofTag = {
      ...BaseTag,
      scope: string,
      type: "MemberofTag"
    };

    declare type ParamTag = {
      ...TypedTag,
      identifer: string,
      referred: string,
      description: string,
      optional?: Boolean,
      default?: string,
      variadic?: boolean,
      type: "ParamTag"
    };

    declare type ReturnTag = {
      ...TypedTag,
      type: "ReturnTag"
    };

    declare type ThrowsTag = {
      ...TypedTag,
      type: "ThrowsTag"
    };

    declare type TypedefTag = {
      of: string[],
      alias: String,
      type: "TypedefTag"
    };

    declare type PrivateTag = {
      ...BaseTag,
      type: "PrivateTag"
    };

    declare type ProtectedTag = {
      ...BaseTag,
      type: "ProtectedTag"
    };

    declare type PublicTag = {
      ...BaseTag,
      type: "PublicTag"
    };

    declare type VisibilityTag = {
      ...BaseTag,
      visiblity: "public" | "protected" | "private",
      type: "VisibilityTag"
    };
}
